                   TSO "PERSONAL AUTHORIZATION"

      Sometimes you have to authorize a particular TSO command, or
a set of them, and you don't want anyone else (except perhaps other
people in your group) to be able to run those commands authorized.
Here's how you can set up "TSO Personal Authorization", and nobody
else will have it.  They might run the same commands as you, but for
them, the commands will not run APF authorized, but for you, they will.

      This maneuver, which a systems programmer can set up for himself,
is built on a principle that the TSO designers built into TSO (perhaps
as a "back door") and (to my knowledge) they did not document it.  It
really is kind of "sensitive information", which most people (except
of course, US) should not know.

      Let's start explaining:  The TSO authorization tables, which are
in 4 csects:  IKJEFTE2, IKJEFTE8, IKJEFTAP, IKJEFTNS, now reside in the
load module IKJTABLS.  In the old TSO days, before TSO/E, they used to
reside in load module IKJEFT02, but since they have to be customized
across TSO releases, and the rest of load module IKJEFT02 is of course,
release-dependent, and these csects are only tables with 8-character
load module names in them, the TSO/E developers wisely took them out of
the executable TSO module IKJEFT02, and made a "table only" load module
called IKJTABLS, which now contains them.

      Now the key principle and the secret is as follows:  An IKJTABLS
load module, which is executing in a TSO session out of an AUTHORIZED
STEPLIB (in other words, a STEPLIB that is running AUTHORIZED in that
TSO session), will ALWAYS COMPLETELY OVERRIDE the settings in the active
IKJTSOxx member of PARMLIB.  This will not happen if the same library
is running in someone else's session as a linklist library (not STEPLIB)
or as an ISPLLIB library.  Then, IKJTSOxx rules.

      This is a cool principle, that works out well for you, if you can
make your own TSO LOGON PROC.  If you can, you can put an APF authorized
library as the STEPLIB, stick your own customized IKJTABLS member,
expanded to include everything your heart desires to authorize, in that
set of tables (see Files 185 and 186 of the CBT Tape for a living and
breathing example of IKJTABLS source and load), logon to your TSO
session using that LOGON PROC, and lo and behold, you have overridden
IKJTSOxx, and your TSO command authorization tables are now completely
separate from what the public has.

      There is one caveat to this.  That is, that your IKJTABLS in the
"APF authorized STEPLIB" library, is a COMPLETE OVERRIDE of what's in
the active IKJTSOxx in PARMLIB.  If you don't copy all of the member
names from PARMLIB to the corresponding IKJTABLS csects, you've actually
LOST the ability to run those modules authorized.  So you have to be
very careful to look first in your active IKJTSOxx member, and create an
IKJTABLS load module which contains all of those names first, and THEN
you expand the list to what you want extra.  Otherwise, you've actually
lost some of your authorization power.

      Of course, if your installation changes the active IKJTSOxx
member, you have to add the corresponding changes to your IKJTABLS
load module, in order to be able to keep up.

      The Fullscreen ZAP TSO command (source on File 134, load on File
135) will be very helpful in zapping module entry names into your copy
of the appropriate IKJTABLS load module csects.  This will allow making
changes on the fly.  Otherwise, you'd have to assemble IKJTABLS every
time you wanted to change it.  You might want to put an entry for load
module ZAP into the IKJEFTE2 table, so you can run ZAP authorized, and
that will allow you to run ZAP with the FULLVOL operand and examine
every byte on a disk, deleted or not.  This is an "extra added attrac-
tion" of the Fullscreen ZAP command.

      For more help, go to Files 185 and 797 of the CBT Tape, where
you have prototype examples of IKJTABLS source and load with a lot of
the appropriate module names, already put into them.  That'll help you
to get started.  In particular, File 797 will provide you with materials
that will help you set up "personal authorization", even if your instal-
lation will NOT let you make your own LOGON proc.  The stuff in File 797
is based on the following principle:

      We first have to ask a question.  "Where are the authorization
tables which your TSO session ACTUALLY USES, to make the decision
whether to run a program as "authorized" or not?

      The answer is, that these tables are actually in your own address
space, and therefore they are "personal" to your userid.  At LOGON time,
the tables are copied in from either the PARMLIB copies (which are
already in core from the IKJTSOxx parmlib member settings) or they are
copied in from an APF-authorized STEPLIB, if your LOGON proc includes
one, that has an IKJTABLS module already assembled.  Your own personal
tables are pointed to, from addresses in your session's LWA (Logon Work
Area) control block.

      Now, we have discovered that if you make your own set of tables,
and re-point the addresses in the Logon Work Area to them, then the new
tables are honored rather than the old ones.  The programs in CBT File
797 are designed to help you accomplish this, and they can create a new
set of TSO authorization tables for you, even if you have not initially
gotten them from an APF-authorized STEPLIB in your LOGON proc.  So you
can ALWAYS get your own personal authorization, provided that your TSO
session can run at least one authorized program.  See CBT File 797 for
all the details.

