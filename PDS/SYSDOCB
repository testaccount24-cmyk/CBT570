These miscellaneous hints and tips were received from Bruce Bordonaro.
                                                                (05/02)
 They represent pieces of his experience that he has written down.

********************************************************************************
The address of the DADSM pre- and post-processing exits are stored in
in the CVAF table which can be found by:

CVT +148 (CVTEXT2 )=A(CVT ext.) or OS/VS2 common extension
EXT2+00C (CVTCVAF )=A(CVAF tbl) or CVAF table **
CVAF+000 (********)=A(ICVCMM10) or DADSM media manager
CVAF+004 (********)=A(ICVTST00) or DADSM media manager
CVAF+01C (********)=A(ICVCMM00) or DADSM media manager
CVAF+020 (********)=A(IGBCFS01) or DADSM commom filter service
CVAF+024 (********)=A(IGBDIS00) or DADSM commom filter service
CVAF+028 (********)=A(IGBDCSDR) or DADSM commom filter service
CVAF+02C (********)=A(IGGPRE00) or DADSM pre-processing exit (31 bit)
CVAF+030 (********)=A(IGGPRE00) or DADSM pre-processing exit (24 bit)
CVAF+034 (********)=A(IGGPOST0) or DADSM post-processing exit (31 bit)
CVAF+038 (********)=A(IGGPOST0) or DADSM post-processing exit (24 bit)
 **-CVAF table is mapped by ICVAFPRM in PVTMACS

Note: IGGPRE00 is used by Pool-DASD which saves the address of the
      original IGGPRE00 in its own storage.  This area can be located
      by disassembling module PLDR310$ csect PLD0010 and looking for
      the offset to the VCON for IGGPRE00.  Add this offset to the
      address(es) at CVAF+2C/CVAF+30 to find its location in memory.
      When a new IGGPRE00 ids LPAM'ed, this location must also be
      zapped.
********************************************************************************
The TSO user terminal status block can be found by:

CVT +000 (CVTTCBP )=A(TCBwords) or PSA TCB/ASCB pointers
PSA +224 (PSAAOLD )=A(ASCB)     or address space control block
ASCB+03C (ASCBTSB )=A(TSB)      or terminal status block
********************************************************************************
The TSO authorized commands/programs tables etc. can be found by:

CVT +9C  (CVTTSVT )=A(TVT)      or TSO vector table
TVT +4C  (TVTTPVT )=A(TPVT)     which is undocumented
TPVT+14  (********)=A(CTLT)     which in undocumented
TPVT+1C  (********)=A(EXTV)     which in undocumented
TPVT+20  (********)=A(ESCB)     which in undocumented (broadcast)
TPVT+28  (********)=A(TPT)      which in undocumented
TPVT+2C  (********)=A(INMXPARM) which in undocumented (IKJTSOxx XMIT)
CTLT+08  (********)=A(IKJEFTE2) the TSO authorized commands table
CTLT+14  (********)=A(IKJEFTE8) the TSO authorized programs table
CTLT+20  (********)=A(IKJEFTNS) the TSO not-background commands table
CTLT+2C  (********)=A(IKJEFTAP) the TSO service facility authorized pgm. table
********************************************************************************
Copies of the the TSO authorized commands/programs tables etc. can be
found in the users private area by:

ASCB+6C  (ASCBASXB)=A(ASXB)     or address space extension block
ASXB+14  (ASXBLWA )=A(LWA)      or logon work area which is undocumented
LWA +A8  (********)=A(IKJEFTAP) the TSO service facility authorized pgm. table
LWA+138  (********)=A(IKJEFTNS) the TSO not-background commands table
LWA+13C  (********)=A(IKJEFTE2) the TSO authorized commands table
LWA+140  (********)=A(IKJEFTE8) the TSO authorized programs table
********************************************************************************
The hash search RNL tables for GRS (which are searched by ISGGREX0) can
be found by:

CVT+1B0  (CVTGVT  )=A(GVT)       or the GRS vector table
GVT+01C  (GVTRSE  )=A(RSE)       or the GRS RNL search table extension
                                 which is undocumented
RSE+038   (********)=A(SIRNL)    or systems inclusion RNL
RSE+03C   (********)=number of entries in SIRNL
RSE+040   (********)=A(QHSI)     unknown
RSE+050   (********)=A(SERNL)    or systems exclusion RNL
RSE+054   (********)=number of entries in SERNL
RSE+058   (********)=A(QHSE)     unknown
RSE+068   (********)=A(RCRNL)    or reserve conversion RNL
RSE+06C   (********)=number of entries in RCRNL
RSE+070   (********)=A(QHRC)     unknown
RSE+098   (********)=A(ISGGRHS0) or GRS hash search routine
RSE+0A8   (********)=A(SERNL)    or same as +50
RSE+0AC   (********)=A(RSE)      pointer back to itself
RSE+0C4   (********)=A(QHSI)     same as +40
RSE+0CC   (********)=A(ISGGRHS0) same as +98
RSE+0D4   (********)=A(ISGGRHS0) same as +98
RSE+0E4   (********)=A(SERNL)    or same as +50
RSE+0E8   (********)=A(RSE)      pointer back to itself
********************************************************************************
The ISPF IBM logo from ISPF V3.2 and above can be eliminated by changing
panel ISP@LOGO to include the following in an initialization section:

.RESP=ENTER
                                                                        ich is
This will simulate an enter and pass through the logo panel.
********************************************************************************
The following set of commands will start/stop JES2 line tracing:

$TR,D                    display current trace status
$TR,ON,P=Y,C=V,ID=4      turn on, set print, set output class, type 4
$TR,P=I                  interrupt and print
$TR,P=N                  stop printing
$TR,OFF                  turn trace off
$TLNE4,TR=I              enable tracing on line4
********************************************************************************
The following set of commands allow debugging REXX functions written as
assembler programs:

TEST 'SYS1.CMDLIB(EXEC)' CP             test EXEC command processor
when prompted to ENTER COMMAND FOR CP:
EX 'TSOBBOR.CLIST(rexxexec)' EXEC       give command to EXEC processor
LOAD 'TSOBBOR.LOAD(rexxfunc)'           if not in LINKLIST/STEPLIB/etc.
AT rexxfunc.rexxfunc                    set breakpoint
GO                                      run the EXEC

Note that the program being LOADed must be reentrant to be found.
********************************************************************************
MVS has built-in GETMAIN/FREEMAIN tracing available.  For MVS/370 and
MVS/XA, it is documented in APARs OZ93349/OZ93350.  For MVS/ESA, it is
documented by APAR OY19890.
********************************************************************************
To check a RACF password against the RACF database:

RACXTRCT TYPE=ENCRYPT (specifying the password to encrypt)
RACXTRCT TYPE=EXTRACT (extract the encrypted password)
and compare the two values.
********************************************************************************
To recycle the SMS address space, zap the SMS CSCB to make the address
space cancelable.  This can be done by:

ASCB+38  (ASCBCSCB)=A(CSCB)     or command scheduling control block
CSCB+07  (CHACT)   =            CSCB activity flags

and turn on the X'08' bit on in this field.  Then issue an MVS CANCEL
command for SMS.  It will then restart itself, causing any ACS exit
routines to be reloaded.
********************************************************************************
The address of the SMS vector table can be found as follows:

CVT  +128 (CVTJESCT)=A(JESCT)    or JES control table
JESCT+064 (JESCTEXT)=A(CTEXT)    or JES control table extension
CTEXT+054 (JESSMSIB)=A(SMSIB)    or SMS SSIB
SSIB +020 (SSIBSUSE)=A(SUSE)     or SSIB subsystem usage field
                                 which is A(SMS vector table)
SSIVT+014                        SMS ASCB ADDRESS
SSIVT+020                        SMF SYSTEM IDENTIFICATION NAME
SSIVT+02C                        ACDS00 DATASET NAME
SSIVT+058                        COMDS00 DATASET NAME
SSIVT+0AC                        A(IGDACSSC exit)
********************************************************************************
The CAXWA chain can be located as follows:

AMCBS      : CVT+X'100' ACCESS METHOD CONTROL BLOCK  (CVTCBSP)
CAXWA     -> AMCBS+X'14' CATALOG WORK AREA
CAXNEXT   -> CAXWA+X'04' NEXT CAXWA ENTRY
CATFLAG1  -> CAXWA+X'08' CATALOG FLAG BYTE 1
 X....... -> BUILD REQUESTED
 .X...... -> OPEN IN CONTROL
 ..X..... -> CLOSE IN CONTROL
 ...X.... -> END OF VOLUME IN CONTROL
 ....X... -> I/O SUPPORT COMPLETED
 .....X.. -> 1:MASTER CATALOG, 0:USER CATALOG
 ......X. -> CATALOG MANAGEMENT IN CONTROL
 .......X -> SCHEDULER IN CONTROL
CATFLAG2  -> CAXWA+X'09' CATALOG FLAG BYTE 2
 X....... -> CATALOG DELETED
 .X...... -> NO DDNAME FOUND
 ..X..... -> UNABLE TO GET CORE
 ...X.... -> I/O ERROR
 ....X... -> RPL CLEAN UP REQUESTED
 .....X.. -> FREE CAXWA IF ERROR
 ......X. -> RECOVERABLE CATALOG
 .......X -> VOLUME TIME STAMP UPDATED
CATFLAG3  -> CAXWA+X'0A' CATALOG FLAG BYTE 3
 X....... -> CRA ALT TIOT EXIST
 .X...... -> CRA NOT EXIST
 ..X..... -> RESERVED
 ...X.... -> CATALOG IS RAC DEFINED
 ....X... -> NO CATALOG PSWD DEFINED
 .....XX. -> 01 NO UPDATE 10 UPDATE
 .......X -> RESERVED
 CATACT   -> CAXWA+X'0B' CATALOG ACTIVITY
 X....... -> IN STORAGE
 .X...... -> ALLOCATED
CATUCBP   -> CAXWA+X'1C' ADDRESS OF CATALOG UCB
CATNAME   -> CAXWA+X'34' CATALOG NAME FIELD 44 BYTES
********************************************************************************
A dataset can be deleted even if it is ENQ'd by the SCRATCH SVC (SVC 29)
by turning on the X'08' bit of the second byte in the parameter list.
This bit specifies to bypass RACF processing (when the caller is in
supervisor state).  This facility can be used via the CAMLST macro.
See the SVC 29 layout in the Debugging Handbook; also see MVS Update
issue #85 for a superscratch program.  IEHPROGM can be modified to do
this by zapping csect IEHPROG6 as follows:
   NAME IEHPROGM IEHPROG6
   VER 0C28 9610C026
   REP 0C28 9618C026
This zap is good for DFP V3.3 through DFSMS/MVS V1.3.
********************************************************************************
The SMS IGDACSSC exit supplied with a CBIPO may be used to display
SMS variables.  When installed, including ACCT=(DEBUG) on the EXEC
statement will cause SMS to put out information on various SMS fields.
********************************************************************************
Information for a job can be found in the SCT as follows:

PSA  +21C (PSATOLD )=A(current TCB)
TCB  +07C (TCBJSTCA)=A(job step TCB)
JSTCB+0B4 (TCBJSCB )=A(JSCB)
JSCB +15C (JSCBACT )=A(active JSCB)
JSCB +105 (JSCBJCT )=A(JCT-16)
JCT  +020 (JCTSDKAD)=A(SCT-16)
SCT  +014 (SCTANSCT)=A(next SCT)

There is an SCT for every step in the job showing program name, step
name, condition code, etc.
********************************************************************************
The following code can be used to convert a real address to its virtual
address counterpart:

         L     R15,CVTPTR         LOAD A(Cvt)
         L     R15,CVTPTRV3-CVT(,R15) A(REAL TO VIRT CNVT ROUTINE)
         L     R1,realaddr        LOAD R1 W/REAL ADDRESS
         BALR  R14,R15            BRANCH TO CONVERSION ROUTINE
         ST    R1,VIRTADDR        SAVE CONVERTED ADDRESS
         ....
VIRTADDR DS    XL4
         PRINT NOGEN
         CVT   DSECT=YES          CVT MAPPING MACRO
********************************************************************************
The checksum value calculated by AMASPZAP is computed as follows:

string out all the numbers, displacements and hex values into four byte
chunks, padded on the right with zeros.  Add all the four byte numbers
together in hex to produce a four byte sum, ignoring any overflow.  For
example, given the following zap deck:

     VER 0394 4B
     REP 0394 5B
the numbers are strung together as follows:

     03944B03
     945B0000  <---- extra 2 bytes of hex zeroes for padding
    ----------
and  97EF4B03  would be the checksum value.
Note that padding the VER/REP offset values on the left with zeroes
would then obviously affect the checksum value.
********************************************************************************
The SVC update recording table is pointed to by the SCVTSVCR field of
the SCVT, which is pointed to by CVTABEND.  Each entry is 24 bytes
long as follows:
SVCR+00 = original SVC table entry   (8 bytes)
SVCR+08 = return address in caller   (4 bytes)
SVCR+0C = address of new SVC routine (4 bytes)
SVCR+10 = date of last update        (4 bytes packed)
SVCR+14 = number of updates          (2 bytes)
SVCR+16 = PARMLIB IEASVC suffix      (2 bytes)

The layout is mapped in the IHASVC macro.
********************************************************************************
There are several useful panels under the FDR panels.  To get to them
from the FDR primary panel, type the undocumented selection B.
********************************************************************************
You can view various information about ISPF (including ISRCONFG
settings) by issuing the following commands from a ISPF TSO prompt:

   TSO ISPVCALL; TSO ISPVCALL
********************************************************************************
IBM ENF Codes:
01 - device varied online
02 - device varied offline
03 - volume unloaded
06 - SRM status change
08 - path status change
09 - path status change
10 - DDR swap
12 - device pending offline
15 - SMS resource change
16 - device coming online
20 - System information change
21 - MIH interval change
23 - device varied online
24 - device varied offline
25 - volume unloaded
27 - path status change
28 - DDR swap
29 - device pending offline
30 - device coming online
31 - I/O configuration change requested or rejected
32 - I/O configuration change successful
33 - device state change
35 - XES/XCF system event
36 - LOGREC record written
37 - SMF related event
38 - ARM related event
40 - JES2 subsystem related event
41 - WLM related event
42 - SRM related event
43 - SRM related event
45 - SMSVSAM server available
46 - USS event
48 - MVS system logger
51 - GRS resource contention, RNL change, GRS mode change
52 - LNKLST set activation
55 - SRM MVS image related event
56 - WLM job reset
57 - WLM state change
78 - tape allocation
********************************************************************************
APAR Codes (from a January, 1985 PSGIM)

CAN - Cancelled APAR
DOC - Documentation error
DUA - Duplicate of a reolved non-acceptible APAR or dupl of an APAR
      closed more than 10 days ago
DUB - Duplicate of an APAR entered into RETAIN within the past 10 days
DUU - Duplicate of an unresolved APAR
MCH - Machine (hardware) error
PER - Programming error
PRS - Permanent restriction
RET - Returned to the user for more documantation
SUG - Suggestion
UR1 - Unable to reproduce (or known to be corrected) in the next
      release available (from ISMD)
UR2 - Same as UR1, except written agains a release that was not
      supported at the time the APAR was received
UR3 - Unable to reproduce (or known to be corrected) on a currently
      supported release
UR4 - Same as UR3, except written agains a release that was not
      supported at the time the APAR was received
UR5 - Unable to reproduce on the same level as reported  (not used if
      UR1, UR2, UR3, or UR4 are applicable)
USE - User error
FIN - Fixed in next release.  (FIN must be new, as it does not appear in
      the January, 1985 PSGIM.)
********************************************************************************
Two new ISPF commands with V4.2 are RETP and RETF.  RETP shows a panel
that has the recently entered ISPF commands, while RETF recalls the
last entered command to the command line.
********************************************************************************
Internal product version and debugging information can be found as
follows:
Fileaid SPF   Z (on main menu)
Xpediter      XENV (on main menu)
QuickRef      QINFO (on main menu)
********************************************************************************
To bypass all SAF calls using the SAF router, zap the SAF router module
as follows:
 NAME ICHSFR00 ICHSFR00
 VER 0000 90EED00C
 REP 0000 1FFF07FE
********************************************************************************
RACF Facility classes:
BPX.DAEMON                     Unix services daemons
BPX.DEFAULT.USER               Unix services default UID
BPX.FILEATTR.APF               Unix services "APF" authorization
BPX.FILEATTR.PROGCTL           Unix services program controlled
BPX.SERVER                     Unix services servers
BPX.SMF                        Unix services SMF logging
BPX.SUPERUSER                  Unix services supervisor authority
BPX.WLMSERVER                  Unix services ???
CBD.CPC.IOCDS                  HCD IOCDS access
CSR.BLSRHIPR.ssnm              BLSR hiperspace access
CSVAPF.dsn                     dynamic APF for dataset
CSVAPF.MVS.SETPROG.FORMAT.DYNAMIC dynamic APF switch to dynamic
CSVAPF.MVS.SETPROG.FORMAT.STATIC  dynamic APF switch to static
CSVAPF.*.**                    dynamic APF
CSVDYNEX.*.**                  dynamic exits
CSVDYNL.dsn.**                 dynamic linklist
CSVLLA.dsn                     LLA updating
DITTO.**                       DITTO processing
ERBSDS.**                      RMF sysplex dataserver
ICHBLP                         BLP tape processing
ICHNL                          NL tape processing
ICHUNCAT.dsn                   access to uncataloged datasets
ICHUSERCAT                      JOBCAT/STEPCAT authorization
IEAVECTOR                      vector services
IEC.TAPERING                   read tape with write ring intact
IGG.**                         catalog management
IGG.CATLOCK                    catalog management
IGG.DELETE.NOSCRTCH            catalog management
IGG.STGADMIN.CATLOCK           catalog management
IGG.STGADMIN.DIRCAT            catalog management
IRR.**                         RACF services
IXLSTR.strname                 XCF structures-class(LOGSTRM)
IXLSTR.DFHNCLS.counter         XCF structures-class(LOGSTRM)
IXLSTR.LIKE.strname            XCF structures-class(LOGSTRM)
JESx.command                   JESx commands
MVS.command                    MVS commands
MVS.MCSOPER.userid             EMCS commands from console *
MVS.MCSOPER.SYSIOSRS           EMCS commands from console *
MVSADMIN.LOGR                  XCF-LOGR structure define/delete/list
MVSADMIN.RRS.**                XCF-resource recovery
MVSADMIN.WLM.**                XCF-WLM
MVSADMIN.XCF.ARM               XCF-IXCMIAPU for ARM
MVSADMIN.XCF.CFRM              XCF-IXCMIAPU for CFRM
MVSADMIN.XCF.LOGR              XCF-IXCMIAPU for LOGR define/delete/list
MVSADMIN.XCF.SFM               XCF-IXCMIAPU for SFM
NJE.node                       JES remote access
RJE.node                       JES remote access
STGADMIN.ADR.**                SMS ADRDSSU functions
STGADMIN.ADR.CONVERTV          SMS ADRDSSU functions
STGADMIN.ADR.COPY.BYPASSACS    SMS ADRDSSU functions
STGADMIN.ADR.COPY.CNCURRNT     SMS ADRDSSU functions
STGADMIN.ADR.COPY.INCAT        SMS ADRDSSU functions
STGADMIN.ADR.COPY.PROCESS.SYS  SMS ADRDSSU functions
STGADMIN.ADR.COPY.TOLERATE.ENQF SMS ADRDSSU functions
STGADMIN.ADR.DEFRAG            SMS ADRDSSU functions
STGADMIN.ADR.DUMP.CNCURRNT     SMS ADRDSSU functions
STGADMIN.ADR.DUMP.INCAT        SMS ADRDSSU functions
STGADMIN.ADR.DUMP.PROCESS.SYS  SMS ADRDSSU functions
STGADMIN.ADR.DUMP.TOLERATE.ENQF SMS ADRDSSU functions
STGADMIN.ADR.IMPORT            SMS ADRDSSU functions
STGADMIN.ADR.PATCH             SMS ADRDSSU functions
STGADMIN.ADR.RELEASE.INCAT     SMS ADRDSSU functions
STGADMIN.ADR.RELEASE.PROCESS.SYS SMS ADRDSSU functions
STGADMIN.ADR.RESTORE.BYPASSACS SMS ADRDSSU functions
STGADMIN.ADR.RESTORE.DELCATE   SMS ADRDSSU functions
STGADMIN.ADR.RESTORE.IMPORT    SMS ADRDSSU functions
STGADMIN.ADR.RESTORE.INCAT     SMS ADRDSSU functions
STGADMIN.ADR.RESTORE.TOLERATE.ENQF SMS ADRDSSU functions
STGADMIN.ADR.STGADMIN.COPY.DELETE SMS ADRDSSU functions
STGADMIN.ADR.STGADMIN.COPY.RENAME SMS ADRDSSU functions
STGADMIN.ADR.STGADMIN.DEFRAG   SMS ADRDSSU functions
STGADMIN.ADR.STGADMIN.DUMP     SMS ADRDSSU functions
STGADMIN.ADR.STGADMIN.DUMP.DELETE SMS ADRDSSU functions
STGADMIN.ADR.STGADMIN.BUILDSA  SMS ADRDSSU functions-standalone IPL text
STGADMIN.ANT.**                SMS remote copy
STGADMIN.ANT.ESFC.**           SMS remote copy/flashcopy
STGADMIN.ANT.PPRC.**           SMS remote copy/PPRC
STGADMIN.ANT.XRC.**            SMS remote copy/XRC
STGADMIN.DFHSM.CATMAINT        DFHSM
STGADMIN.EDG.**                SMS RMM tape
STGADMIN.EDG.OWNER.ownerid     SMS RMM tape
STGADMIN.EDG.RESET.SSI         SMS RMM tape
STGADMIN.IDC.**                SMS IDCAMS functions
STGADMIN.IDC.BINDDATA          SMS IDCAMS functions
STGADMIN.IDC.DIAGNOSE.CATALOG  SMS IDCAMS functions
STGADMIN.IDC.DIAGNOSE.VVDS     SMS IDCAMS functions
STGADMIN.IDC.EXAMINE.DATASET   SMS IDCAMS functions
STGADMIN.IDC.LISTDATA          SMS IDCAMS functions
STGADMIN.IDC.SETCACHE          SMS IDCAMS functions
STGADMIN.IDC.SETCACHE.DISCARDPINNED SMS IDCAMS functions
STGADMIN.IDC.SETCACHE.SUBSYSTEM SMS IDCAMS functions
STGADMIN.IGD.**                SMS dynamic configuration activation
STGADMIN.IGD.ACTIVATE.CONFIGURATION SMS configuration activation
STGADMIN.IGG.**                SMS IDCAMS functions
STGADMIN.IGG.ALTER.SMS         SMS IDCAMS functions
STGADMIN.IGG.DEFDEL.UALIAS     SMS IDCAMS functions
STGADMIN.IGG.DEFNVSAM.NONVR    SMS IDCAMS functions
STGADMIN.IGG.DEFNVSAM.NOBCS    SMS IDCAMS functions
STGADMIN.IGG.DELETE.NOSCRTCH   SMS IDCAMS functions
STGADMIN.IGG.DELGDG.FORCE      SMS IDCAMS functions
STGADMIN.IGG.DELNVR.NOBCSCHK   SMS IDCAMS functions
STGADMIN.IGG.DIRCAT            SMS IDCAMS functions
STGADMIN.IGG.DLVVRNVR.NOCAT    SMS IDCAMS functions
STGADMIN.IGG.LIBRARY           SMS IDCAMS functions for 3495 TLDS

RACF JESINPUT classes:

RACF JESJOBS classes:
CANCEL.node.userid.jobname     jobname cancel
SUBMIT.node.jobname.userid     jobname submit

RACF JESSPOOL classes:
node.userid.jobname.jobid.ds#.jesname JES spool dataset name

RACF MQM classes:
MQADMIN.**                     MQM administrative options
MQCHAN.**                      MQM reserved
MQCMDS.**                      MQM commands
MQCONN.**                      MQM connections
MQLIST.**                      MQM name lists
MQPROC.**                      MQM name processes
MQQUEUE.**                     MQM queues

RACF NETVIEW classes:
NETCMDS.**                     Netview commands
NETSPAN.**                     Netview commands to resources in span
NVASAPDT.**                    Netview/Access Services
RMTOPS.**                      Netview Remote Operations
RODMMGR.**                     Resource Object Data Manager

RACF OPERCMDS classes:
subsys.command.qualifier
MVS.**
JES2.jescmd.qualifier

RACF SDSF classes:
ISFATTR.**                     SDSF overtypeable fields
ISFCMD.sdsfcmd.qualifier       SDSF panels and commands
ISFINIT.**                     SDSF initiators
ISFMEMB.**                     SDSF MAS members
ISFOPER.ANYDEST.jesname        SDSF destinations
ISFOPER.SYSTEM                 SDSF / command

RACF TSO classes:
ACCTNUM                        TSO account number
PERFGRP                        TSO performance groups
TSOAUTH                        TSO authorities
TSOPROC                        TSO logon procs

TSS CA-1 CACMD classes:
L0ADD
L0CHECKI
L0CHECKO
L0CLEAN
L0DELETE
L0EXTEND
L0EXPIRE
L0RETAIN

TSS CA-1 CATAPE classes:
BLPNORES
BLPRES
FORNORES
FORRES
NLNORES
NLRES
NSLNORES
NSLRES
YSVCCOND
YSVCUNCD
********************************************************************************
The MVS symbol table entries are found as follows:
CVT +08C= A(ECVT)
ECVT+128= A(symbol table) mapped by ASASYMBP
Multiple DSECTS in ASASYMBP map the table header and table entries.  IBM
provides an API for doing this via the ASASYMBM routine.
********************************************************************************
TSS has a command to refresh OMVS information in the TSS address space.
Enter the MVS command F TSS,OMVSTABS
********************************************************************************
A trace facility exists in Endevor which can be enabled by allocating a
DD statement of EN$TRXIT to a dataset (or SYSOUT, I think with
DCB=(LRECL=133,BLKSIZE=1330,RECFM=FB,DSORG=PS)
********************************************************************************
To find out what jobs have left unreusable address spaces:
1. Get SVC dump of PCAUTH address space (asid 2)
2. In IPCS issue the command:
   runc addr(cvt+364%+138?) link(x'88') exec((l x+48?+1c len(8) asid(2)
   char)) nodisplay
   cvt+364=a(svt)
   svt+138=a(mdlq)-memory delete queue header in PCAUTH address space
   mldq+48=a(mqse)
   mldq+88=a(next mqse)
   mqse+1c=a(jobname)
3. This should give a list of jobnames (OS/390 1.3 and above apparently)
   which can then be used to identify the culprits.
********************************************************************************
To avoid job step timing, set a field in the ASCB as follows:
    OI  ASCBRCTF,ASCBTOFF
********************************************************************************
Undocumented D LLA command options:ld in the ASCB as follows:
    D LLA                      LLA library list in PROGxx order
    D LLA,STATS|STATISTICS,    fetch status for each LLA library
          {FETCHED,VLF|SORT}
    D LLA,STATS|STATISTICS,    fetch status for each LLA library
          {LIB=dsn}{,MEM=member}
    D LLA,SORT                 LLA library list in dataset name order
    D LLA,VLF{,SORT}           VLF library list
    D LLA,LIB=dsn              LLA library members list
    D LLA,LIB=dsn,{MEM=member} LLA library member list
********************************************************************************
OPS/MVS Coding tips:
1. Use address OSF 'OI.....' instead of address OPER ':OI.....'.  This
   will avoid extra overhead of OPS issuing a console command so its
   subsystem can pick up the SRC to route the command to a server.
2. When issuing operator commands in OPS/REXX programs with address
   OPER, use the OPSCMD format to specify the NOOUTPUT keyword unless
   you really want to process the output.  This will avoid OPS/MVS
   delays waiting for a command response.
3. Use OPSTATUS instead of D A,L to get information on active jobs.
4. Use OPSTATUS instead of D R,L to get information on WTORs.
5. Use OPSYSPLX instead of D XCF to get information on the sysplex.
6. Use OPJES2   instead of $D commands to get information on initiators,
   input queues, lines, printers, spool.
7. Examine global variables GLOBAL1.CATCHUP.ruleset.rulename to see if
   the rule has CATCHUPYES specified.  The value displayed contains a
   TOD value that is massaged and reflects something greater than the
   actual time that the rule is scheduled to fire next.  When the rule
   is disabled, the global variable will be deleted.  Catchup processing
   only consists of running the rule one time when it needs to be
   caught up on.
8. See volume 3 for information on using the below functions:
   x = ops09trc(???) for tracing info from MSG rules
   x = ops0atrc(???) for tracing info from CMD rules
   x = ops0etrc(???) for tracing info from DOM rules
********************************************************************************
A module can be called and retrieved using the standard order of search
with the TSO CALL command by using:
   CALL *(IEFBR14)
so that the linklist/lpalist/etc. load libary name need not be specified
and wind up allocated, and need to be freed.
********************************************************************************
JES2 automatic commands:
     $TAnnnn,T=hh.mm,I=iiiii,'$VS,''mvs command'''
     $TAnnnn,T=hh.mm,I=iiiii,'jes command'
where iiiii is the interval in seconds from 1 to 86400 (24 hours)
********************************************************************************
