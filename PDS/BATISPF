Batch ISPF     Roy Gardiner  www.roygardiner.com
----------

Change history:
26/Sep/2002    Added note about TSO PROFILE


There are several gotchas in running batch ISPF. Some are just
a matter of administration (e.g. data set allocations) and some are
more subtle (e.g. profile variables) but all are irritating and time
consuming to fix if you have not seen them before.  Hence this note.

The following outline JCL shows (a) a way to prevent contention
using ISPF's internal tables and (b) extra DDs needed to prevent
contention with your on-line session.  The IEBCOPY step is pretty much
complete, the DDs for IKJEFT01 are extra and can be added to your
existing batch ISPF JCL.


000002 //IEBCOPY  EXEC PGM=IEBCOPY
000003 //SYSPRINT DD SYSOUT=*

         you will need to change sys1.ispftables to the name of the
         datasets containing ISPF's tables


000006 //PROFSYS  DD DSN=sys1.ispftables,DISP=SHR
000007 //PROFILE  DD DISP=(,PASS),SPACE=(CYL,(1,0,5)),UNIT=SYSDA
000008 //SYSIN    DD *
000009  COPY OUTDD=PROFILE,INDD=PROFSYS
000010  S M=((ISPSPROF,,R))
000011  S M=((ISRPROF,,R))
000012  S M=((ISPPROF,,R))
000013  S M=((ISPCMDS,,R))


000015 //TSO      EXEC PGM=IKJEFT01
000016 //ISPCTL0  DD  DISP=NEW,UNIT=SYSDA,SPACE=(CYL,(1,1)),
000017 //             DCB=(LRECL=80,BLKSIZE=800,RECFM=FB)

         --same for ISPCTL1 2 3 and 4 --

000026 //ISPWRK1  DD  DISP=NEW,UNIT=SYSDA,SPACE=(CYL,(1,1)),
000027 //             DCB=(LRECL=256,BLKSIZE=2560,RECFM=FB)

         --same for ISPWRK2 3 and 4 --

000034 //ISPLOG   DD  DISP=(,PASS),UNIT=SYSDA,
000035 //             DCB=(LRECL=125,BLKSIZE=129),
000036 //             SPACE=(129,(592,563))

000038 //ISPPROF  DD  DISP=(OLD,DELETE),DSN=*.IEBCOPY.PROFILE


1) The IEBCOPY (lines 2-13 above)

When ISPF starts, it opens several tables.  If two jobs attempt to
open the same tables at the same time, there will be a contention
error.  Copying the tables eliminates this.

There are other ways of preventing contention, but I'm assuming that any
way that works is good enough to get you started.

2) IKJEFT01 is batch TSO, necessary for running ISPF.

3) DDnames ISPCTL0-4 (lines 16-17) enable file tailoring to be done
   in batch without contention with your on-line user ID.

4) ISPWRK1-4 similarly allow ISPF work files not under your ID.

5) ISPLOG need not be allocated, but setting it up like this
   eliminates some error messages.  If you want to retain this
   information, you must give it a unique dataset name otherwise once
   again there could be contention.

6) Note that the UNIT, VOLUME, SPACE, DCB and other attributes will
   not be optimal for your site, although they should work. Consider
   using VIO rather than SYSDA, in consultation with your local DASD
   experts.

7) You must watch out for your TSO options; they may be different in
   batch. In particular, look out for TSO PROFILE; you should either
   (a) issue the command in your exec to make sure it has the same
   value always or (b) always use fully qualified DSNs, in quotes, in
   your execs.  I recommend the second approach because it means
   the reader can see the value of a DSN without having to check
   somewhere else in the exec for the PROFILE command.

Defining these DDs prevents all contention issues but one; the use of
profile variables.  If your dialog uses VGET (whatever) PROFILE, you
have to make sure the appropriate table is available in batch.

My advice is NOT to use the profile pool in any dialog that might
run in batch.

The easiest way to get a bunch of variables in my opinion is to create
an ISPF table with one row and as many extension variables as needed. A
TBSKIP to that row then replaces the VGET from the profile.

If you have to use the profile, be aware of these points:

1. The on-line and batch APPLIDs must match.  If you are running with
   with APPLID ISR on-line, then you must start your batch session

   ISPSTART whatever NEWAPPL(ISR)

2. The table containing profile variables is xxxPROF where xxx is the
   APPLID. It's held in your ISPPROF dataset.

3. xxxPROF is open whilst you are on-line; values of profile variables
   may vary during your ISPF session, but the values held in the saved
   table xxxPROF in ISPPROF will only be updated at end of session.  If
   you are setting profile variables in your on-line session to be used
   in batch you must therefore:

     -issue TBSAVE of xxxPROF just before submitting the batch job
     -the TBSAVE must save to a unique dataset
     -the batch process must ensure that the xxxPROF member is part of
      the ISPPROF dataset; if you're using the IEBCOPY method outlined
      above, you might copy the ISRxxxx tables into the unique dataset
      and use that rather than a temporary.

   Only then can you guarantee that batch and on-line values will
   be in step.

